#!/bin/bash
clear

# FunciÃ³n para instalar ws-epro
install_wsepro() {
    echo "Instalando ws-epro"
    sleep 2
    wget https://github.com/SparkerMoved/SSH-PLUS/raw/main/Modulos/ws-epro -O /usr/local/bin/ws-epro &&
    chmod +x /usr/local/bin/ws-epro

    if wget https://raw.githubusercontent.com/SparkerMoved/SSH-PLUS/main/Modulos/ws-epro.service -O /etc/systemd/system/ws-epro.service; then
        chmod +x /etc/systemd/system/ws-epro.service
    else
        echo "Error al descargar ws-epro.service"
        exit 1
    fi

    if wget https://raw.githubusercontent.com/SparkerMoved/SSH-PLUS/main/Modulos/port.bin -O /usr/bin/ws-port; then
        chmod +x /usr/bin/ws-port
    else
        echo "Error al descargar port.bin"
        exit 1
    fi

    # ConfiguraciÃ³n de puertos
    clear
    echo -e "\E[41;1;37m       ðŸš€   DEFINIR PUERTOS WEBSOCKET WS-PRO   ðŸš€           \E[0m"
    echo ""
    sleep 1
    echo "   PUERTO LOCAL : " openssh
    echo "   PUERTO PYTHON : " wsopenssh
    echo ""
    echo "Puertos definidos con exito!!!"

    WS_DIR=/usr/local/etc/ws-epro
    if [ -d "$WS_DIR" ]; then
        rm -rf "$WS_DIR"
    fi
    mkdir "$WS_DIR"

    echo "EMPEZAMOS A CONFIGURAR WEBSOCKET WS-EPRO..."
    sleep 2
    {
        echo "# verbose level 0=info, 1=verbose, 2=very verbose"
        echo "verbose: 0"
        echo "listen:"
        echo "##openssh"
        echo "- target_host: 127.0.0.1"
        echo "##portopenssh"
        echo "  target_port: $openssh"
        echo "##wsopenssh"
        echo "  listen_port: $wsopenssh"
    } > /usr/local/etc/ws-epro/config.yml

    chmod +x /usr/local/etc/ws-epro/config.yml

    # Habilitar y arrancar el servicio
    systemctl daemon-reload
    systemctl enable ws-epro
    systemctl start ws-epro

    echo "CONFIGURANDO WEBSOCKET WS-PRO..."
    sleep 3
    clear
    echo -e "\E[41;1;37m        MAXPLAY VPN  ðŸš€           \E[0m"
    echo ""
    echo "   PUERTO LOCAL : $openssh"
    echo "   PUERTO PHYTON : $wsopenssh"
    echo ""
    echo "WEBSOCKET WS-PRO INSTALADO CON EXITO !!"

    rm -rf install-ws && cat /dev/null > ~/.bash_history && history -c
}

# FunciÃ³n para desactivar ws-epro
disable_wsepro() {
    systemctl stop ws-epro
    systemctl disable ws-epro
    echo "Websocket ws-epro ha sido desactivado."
}

# FunciÃ³n para activar ws-epro
enable_wsepro() {
    if [ ! -f /etc/systemd/system/ws-epro.service ]; then
        echo "El archivo de servicio ws-epro.service no existe. Reinstalando..."
        install_wsepro
        return
    fi
    systemctl daemon-reload
    systemctl enable ws-epro
    systemctl start ws-epro
    echo "Websocket ws-epro ha sido activado."
}

# FunciÃ³n para desinstalar ws-epro
uninstall_wsepro() {
    systemctl stop ws-epro
    systemctl disable ws-epro
    rm -f /usr/local/bin/ws-epro
    rm -f /etc/systemd/system/ws-epro.service
    rm -f /usr/bin/ws-port
    rm -rf /usr/local/etc/ws-epro
    systemctl daemon-reload
    echo "Websocket ws-epro ha sido desinstalado."
}

# Verificar si ws-epro estÃ¡ instalado
if command -v ws-epro &> /dev/null; then
    figlet 'MAXPLAY-VPN' | lolcat
    echo -e "\E[41;1;37m       ðŸš€   CONFIGURAR WEBSOCKET WS-PRO   ðŸš€           \E[0m"
    echo ""
    echo "1: Activar Websocket ws-epro"
    echo ""
    echo "2: Desinstalar Websocket"
    echo ""
    echo "0: Salir"
    echo ""
    echo "â˜… Elige una opcion : "

    case $option in
        1 | 01)
            enable_wsepro
            ;;
        2 | 02)
            uninstall_wsepro
            ;;
        *)
            echo "Saliendo..."
            ;;
    esac
else
    install_wsepro
fi